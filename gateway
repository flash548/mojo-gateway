#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::SQLite;
use Mojo::JWT;
use constant SECRET => 'secret';

my $ua = Mojo::UserAgent->new;

helper sqlite => sub {
    state $path = app->home->child( 'data.db' );
    state $sqlite = Mojo::SQLite->new( 'sqlite:' . $path );
    return $sqlite;
};

app->sqlite->auto_migrate(1)->migrations->from_data;

plugin Yancy => {
    backend => { Sqlite => app->sqlite },
    editor => {
        require_user => { is_admin => 1 },
    },
    schema => {
        users => {
            'x-id-field' => 'email',
            properties => {
                email => {
                    type => [ 'string', 'null' ],
                    format => 'email',
                },
                password => {
                    type => [ 'string', 'null' ],
                    format => 'password',
                },
                is_admin => {
                    type => 'boolean',
                    default => 0,
                },
            },
        },
    },
};

app->yancy->plugin( 'Auth' => {
    # Configuration common to all plugins can be set once globally
    schema => 'users',
    allow_register => 1,
    # Here are the individual auth plugins to configure
    plugins => [
        [ Password => {
            username_field => 'email',
            password_field => 'password',
            password_digest => {
                type => 'SHA-1',
            },
        } ],
    ]
} );

get '/logout' => sub ($c) {
  $c->session(expires => 1);
  $c->render('yancy.auth.password.login');
};

under sub ($c) {
    unless ($c->yancy->auth->current_user) {

        # set return_to value to go back to initially requested url
        $c->flash({ return_to => $c->req->url });
        $c->redirect_to('yancy.auth.password.login');
        return undef;
    }
    return 1;
};

any '/api/*' => sub ($c) {
  my $tx = Mojo::Transaction::HTTP->new;
  $tx->req($c->req->clone);

  # replace with destination address
  $tx->req->url(Mojo::URL->new('http://localhost:8080' . $c->req->url));

  # inject the JWT token
  my $jwt = Mojo::JWT->new(claims => {
    email => $c->yancy->auth->current_user->{email}
  }, secret => SECRET)->encode;

  # forward the request
  $tx = $ua->start($tx);

  # make the reply
  $c->res->code($tx->res->code);
  $c->res->headers($tx->res->headers);
  $c->res->body($tx->res->body);
  $c->rendered;
};

any '/**' => sub ($c) {
  $c->render(text => "I would go to frontend");
};

# Remove a default header
app->hook(after_dispatch => sub ($c) {
  $c->res->headers->remove('Server');
});

app->start;

__DATA__
@@ migrations
-- 1 up
CREATE TABLE users (
    email VARCHAR UNIQUE,
    is_admin BOOLEAN DEFAULT FALSE,
    password VARCHAR
);