export function UserTable(props) {
  const [state, setState] = useState({
    sortColumn: "email",
    sortDirection: "asc",
    searchEmail: "",
  });
  const pageSize = 25;
  const [grid, setGrid] = useState(null);
  const tableContainerRef = useState(null);
  const [tableHeight, setTableHeight] = useState(200);

  useEffect(() => {
    if (tableContainerRef.current) {
      setTableHeight(tableContainerRef.current.clientHeight);
    }
  }, [tableContainerRef.current])

  useEffect(() => {
    const columnDefs = [
      {
        field: "id",
        headerName: "ID",
        resizable: true,
        suppressMovable: true,
      },
      {
        field: "last_name",
        headerName: "Last Name",
        suppressMovable: true,
      },
      { field: "first_name", headerName: "First Name", suppressMovable: true },
      { field: "email", headerName: "Email", suppressMovable: true },
    ]; 

    const gridOptions = {
      columnDefs: columnDefs,
      rowData: [],
      rowSelection: "none",
      domLayout: "normal",
      rowModelType: "infinite",
      cacheBlockSize: pageSize,
      cacheOverflowSize: 2,
      maxConcurrentDatasourceRequests: 1,
      infiniteInitialRowCount: pageSize,
      maxBlocksInCache: 10,
      suppressCellSelection: true,
    };

    const gridDiv = document.querySelector("#usersGrid");
    const gridVal = new agGrid.Grid(gridDiv, gridOptions);
    gridVal.gridOptions.api.sizeColumnsToFit();
    
    window.onresize = () => {
      if (gridVal) {
        gridVal.gridOptions.api.sizeColumnsToFit();
        if (tableContainerRef.current) {
          setTableHeight(tableContainerRef.current.clientHeight);
        }
      }
    };

    setGrid(gridVal);

   }, [tableContainerRef.current]);

  useEffect(() => {
    onSearch();
  }, [grid]);

  function onSearch() {
    if (grid == null) return;

    const dataSource = {
      rowCount: undefined,
      getRows: (params) => {
        const page = Math.floor(params.startRow / pageSize);
        let baseUrl = `/admin/users?page=${page}&pageSize=${pageSize}`;
        
        let status = undefined;
        fetch(`${baseUrl}`)
          .then((resp) => { status = resp.status; return resp.json(); })
          .then((data) => {
            if (status === 200) {
              params.successCallback(data.results, data.total_items);
            } else {
              showToast(data.message);
              params.successCallback([], 0);
            }
          })
          .catch((error) => {
            showToast(error.message);
          });
      },
    };

    grid.gridOptions.api.setDatasource(dataSource);
  }


  return html`<div class="pa2 flex flex-column h-100">
    <div class="flex justify-center mb4">
      <div class="rux-form-field w-50">
        <input
          id="user-search"
          type="search"
          placeholder="Search Email"
          value=${state.searchEmail}
          class="rux-input"
          style=${{
            color: "var(--defaultText) ",
            backgroundColor: "var(--tableHeaderBackgroundColor) ",
          }}
          onInput=${(e) => {
            setState({ ...state, searchEmail: e.target.value });
          }}
        />
      </div>
    </div>
    <div ref=${tableContainerRef} class="h-100 w-100 overflow-hidden flex">
      <div
        id="usersGrid"
        style=${`height: ${tableHeight}px; max-height: ${tableHeight}px; width: 100%`}
        class="ag-theme-astro"
      />
    </div>
  </div>`;
}
