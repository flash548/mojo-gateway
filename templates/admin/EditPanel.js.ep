export class EditPanel extends Component {
  constructor(props) {
    super(props);
    this.isEdit = props.selectedUser !== null;

    this.state = { 
      isSubmitting: false,
      resultMessage: '',
      selectedUser: {...props.selectedUser} || {
        first_name: '',
        last_name: '',
        email: '',
        password: '',
        is_admin: false,
        user_id: 0,
      }
    };
  }

  /**
   * Posts (or Puts) user data to the backend - so it'll CREATE or UPDATE
   * basically
   * @param userObj - user object
   */
  async postUser(userObj) {
    this.setState({ ...this.state, isSubmitting: true });

    let result = await fetch('/admin/users', {
      method: this.isEdit ? 'PUT' : 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({ ...this.state.selectedUser })
    });
    let body = await result.json();
    if (result.status === 201 || result.status === 200) {      
      this.isEdit ? userObj.onEditUser(body) : userObj.onAddUser(body);
      this.setState({ isSubmitting: false, resultMessage: 'Success!'});
      showToast(this.isEdit ? "User Updated" : "User Created", true);
    } else {
      this.setState({ isSubmitting: false, resultMessage: 'Failed!'});
      showToast(body.message);
    }
  }

  render(props) {
    return html`
      <div
        onClick=${() => props.backgroundClicked && props.backgroundClicked()}
        class="z-1000 absolute left-0 top-0 w-100 vh-100 bg-black-50"
      >
        <div
          class="pa3 flex flex-column absolute z-2000 right-0 top-0 w-20 vh-100"
          style="background-color: var(--surfaceElements);"
          onClick=${(e) => { e.stopPropagation(); }}
        >
          <div class="flex flex-row w-100 justify-between">
            <h2>${props.title}</h2>
            <${Icon} icon="close" onClick=${() => props.closeClicked && props.closeClicked()}/>
          </div>
          <div class="mt3 flex flex-column justify-start items-start">
            <form onSubmit=${(e) => { 
                e.preventDefault(); 
                this.postUser(props);
              }}>
              <div class="rux-form-field mb2">
                <label for="user-first_name" class="rux-form-field__label">First Name</label>
                <input id="user-first_name" type="text" value=${this.state.selectedUser.first_name} onChange=${(e) => this.setState({ selectedUser : {...this.state.selectedUser, first_name: e.target.value }})} />
              </div>
              <div class="rux-form-field mb2">
                <label for="user-last_name" class="rux-form-field__label">Last Name</label>
                <input id="user-last_name" type="text" value=${this.state.selectedUser.last_name} onChange=${(e) => this.setState({ selectedUser : {...this.state.selectedUser, last_name: e.target.value }})} />
              </div>
              <div class="rux-form-field mb2">
                <label for="user-email" class="rux-form-field__label">User Email</label>
                <input id="user-email" type="email" value=${this.state.selectedUser.email} onChange=${(e) => this.setState({ selectedUser : {...this.state.selectedUser, email: e.target.value }})} />
              </div>
              <div class="rux-form-field mb2">
                <label for="user-password" class="rux-form-field__label">User Password</label>
                <input id="user-password" type="password" value=${this.state.selectedUser.password} onChange=${(e) => this.setState({ selectedUser : { ...this.state.selectedUser, password: e.target.value }})} />
              </div>
              <div class="rux-form-field mb2">
                <label for="user-user_id" class="rux-form-field__label">User ID</label>
                <input id="user-user_id" value=${this.state.selectedUser.user_id} onChange=${(e) => this.setState({ selectedUser : { ...this.state.selectedUser, user_id: e.target.value }})} />
              </div>
              <div class="rux-form-field mb2">
                <${Checkbox} id="user-reset" label="Expire Password?" checked=${this.state.selectedUser.reset_password} onClick=${(checked) => this.setState({ selectedUser : { ...this.state.selectedUser, reset_password: checked }})} />
              </div>
              <div class="rux-form-field mb2">
                <${Checkbox} id="user-admin" label="Is Admin?" checked=${this.state.selectedUser.is_admin} onClick=${(checked) => this.setState({ selectedUser : { ...this.state.selectedUser, is_admin: checked }})} />
              </div>
              <button type="submit" disabled=${this.state.isSubmitting} class="rux-button ma2">${this.state.isSubmitting ? 'Sending...' : 'Submit'}</button>
            </form>
            <span>${this.state.resultMessage}</span>
          </div>
        </div>
      </div>
    `;
  }
}
